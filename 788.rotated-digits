class Solution {
public:
    map < int, int > mp;
    int good(int x) {
        int ret = 1;\
        int l = x;
        int r = 0;
        int p = 1;
        while (x > 0) {
            ret &= mp[x % 10] > -1;
            r = r + p * mp[x % 10];
            p *= 10;
            x /= 10;
        }
        return ret & (l != r);
    }
    int rotatedDigits(int N) {
        mp[0] = 0;
        mp[1] = 1;
        mp[2] = 5;
        mp[3] = -1;
        mp[4] = -1;
        mp[5] = 2;
        mp[6] = 9;
        mp[7] = -1;
        mp[8] = 8;
        mp[9] = 6;
        int cnt = 0;
        for (int i = 1; i <= N; i++) {
            cnt += good(i);
        }
        return cnt;
    }
};
