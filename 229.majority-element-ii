class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int cnt[3] = {0, 0, 0};
        int ar[3];
        for (const int& x: nums) {
            int fl = 1;
            for (int i = 0; i < 3; i++) {
                if (cnt[i] && ar[i] == x) {
                    cnt[i]++;
                    fl = 0;
                }
            }
            if (fl) {
                int mn = 1;
                for (int i = 0; i < 3; i++) {
                    mn &= (cnt[i] > 0);
                }   
                for (int i = 0; i < 3; i++) {
                    cnt[i] -= mn;
                }   
                for (int i = 0; i < 3; i++) {
                    if (!cnt[i]) {
                        cnt[i] = 1;
                        ar[i] = x;
                        break;
                    }
                }   
            }
        }
        vector < int > ret;
        int thresold = nums.size() / 3;
        for (int i = 0; i < 3; i++) {
            if (!cnt[i]) continue;
            cnt[i] = 0;
            for (const int& x: nums) {
                cnt[i] += (ar[i] == x);
            }
        }
        for (int i = 0; i < 3; i++) {
            if (cnt[i] > thresold) ret.push_back(ar[i]);
        }   
        return ret;
    }
};
